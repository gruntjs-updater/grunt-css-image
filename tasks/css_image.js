// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var fs, imagesize, path;

  imagesize = require("imagesize");

  fs = require("fs");

  path = require("path");

  module.exports = function(grunt) {
    return grunt.registerMultiTask("css_image", "Plugin to generate css file wto bind all images from folder", function() {
      var complete, counts, done, getCssClass, getName, info, options, _;
      _ = grunt.util._;
      getName = function(item) {
        return item.filename.replace(/\.(png|jpg|jpeg|gif)/, "");
      };
      getCssClass = function(options) {
        var background, background_color, background_position, className, css_class_name, css_options, display, ext, folder, folderName, height, images_path, name, prefix, text_indent, txt, width, z_index;
        prefix = options.prefix, width = options.width, height = options.height, images_path = options.images_path, folder = options.folder, name = options.name, ext = options.ext, css_options = options.css_options;
        className = name.replace(".", "");
        folderName = folder.replace("/", "_").replace(".", "");
        txt = "";
        if (css_options == null) {
          css_options = {};
        }
        z_index = css_options.z_index != null ? "\n  z-index: " + css_options.z_index + ";" : "";
        display = css_options.display != null ? "\n  display: " + css_options.display + ";" : "";
        text_indent = css_options.text_indent != null ? "\n  text-indent: " + css_options.text_indent + ";" : "";
        background_color = css_options.background_color != null ? "" + css_options.background_color : "transparent";
        background_position = css_options.background_position != null ? "" + css_options.background_position : "0 0";
        path = ("" + images_path + "/" + folder + "/" + name + ext).replace(/\/.\//g, "\/");
        css_class_name = "" + prefix + folderName + "_" + className;
        background = "background: " + background_color + " url(\"" + path + "\") " + background_position + " no-repeat;";
        return "\n." + css_class_name + "{\n  " + background + "\n  width: " + width + "px;\n  height: " + height + "px; " + z_index + " " + text_indent + " " + display + "\n}";
      };
      options = this.options({
        prefix: "img_",
        images_path: "../images",
        css_options: {}
      });
      info = [];
      done = this.async();
      counts = grunt.util._.reduce(this.files, function(memo, item) {
        return memo + grunt.util._.size(item.src);
      }, 0);
      complete = grunt.util._.after(counts, function(err, opts) {
        var dest, txt;
        dest = opts.dest;
        info = _.sortBy(opts.info, function(item) {
          return item.filename;
        });
        txt = "/* This file is generated */\n";
        info.forEach(function(item) {
          var folder;
          folder = item.folder;
          return txt += getCssClass({
            prefix: options.prefix,
            width: item.width,
            height: item.height,
            images_path: options.images_path,
            folder: folder,
            name: getName(item),
            ext: item.ext,
            css_options: options.css_options
          });
        });
        grunt.file.write(dest, txt);
        grunt.log.writeln("File \"" + dest + "\" created.");
        return done();
      });
      return this.files.forEach(function(f) {
        return f.src.forEach(function(itempath) {
          var src;
          src = path.join(f.cwd, itempath);
          return fs.readFile(src, function(err, data) {
            var parser, result, retStatus;
            parser = imagesize.Parser();
            retStatus = parser.parse(data);
            if (imagesize.Parser.DONE === retStatus) {
              result = parser.getResult();
              result.filename = path.basename(src);
              result.ext = path.extname(src);
              result.folder = path.dirname(itempath);
              info.push(result);
            }
            return complete(null, {
              info: info,
              dest: f.dest
            });
          });
        });
      });
    });
  };

}).call(this);
